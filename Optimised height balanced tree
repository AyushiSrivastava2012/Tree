//determine if the tree is height balanced: optimised
#include<bits/stdc++.h>
struct node{
	int data;
	struct node *left;
	struct node* right;
};
struct node* newNode(int data)
{
    struct node* node = (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return(node);
}
int max(int a, int b)
{
  return (a >= b)? a: b;
} 
bool isBalanced(struct node *root,int* height)
{
    int lh; 
    int rh; 
    if(root == NULL){
    	*height=1;
    	return 0; 
    }
    int l,r;
    l =isBalanced(root->left,&lh);
    r =isBalanced(root->right,&rh);
    *height = (lh > rh? lh: rh) + 1;
    if( abs(lh-rh) <= 1 &&  l && r)
    	return 1;
	return 0;
}
int main()
{
    struct node *root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->left->left->left = newNode(8);
 int h=0;
    if(isBalanced(root,&h))
      printf("Tree is balanced");
    else
      printf("Tree is not balanced");    
 
    getchar();
    return 0;
}
