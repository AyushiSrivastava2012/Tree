/*
there are 2 types of Threaded binary tree.
Single Threaded: Where a NULL right pointers is made to point to the inorder successor (if successor exists)
Double Threaded: Where both left and right NULL pointers are made to point to inorder predecessor and inorder successor respectively. The predecessor threads are useful for reverse inorder traversal and postorder traversal.
*/
#include <bits/stdc++.h>
using namespace std;

struct node{
	int data;
	struct node* left;
	struct node* right;
	bool thread;
};

struct node* create(int d){
	struct node*tmp=(struct node*)malloc(sizeof(struct node));
	tmp->data=d;
	tmp->left=NULL;
	tmp->right=NULL;
	tmp->thread=false;
	return tmp;
}
struct node* leftmost(struct node * root){
	if(root == NULL)
	return NULL;
	while(root->left !=NULL){
		root=root->left;
	}
	return root;
}
void inorder(struct node* root){
//	if(root==NULL)return;
	struct node* cur;
	cur=leftmost(root);
	while(cur!=NULL){
	cout<<cur->data<<" ";
	if(cur->thread){
		cur=cur->right;
	}
	else{
		cur=leftmost(cur->right);
	}
	}
}
int main() {
	struct node* root=create(1);
	root->left=create(2);
	(root->left)->right=root;
	root->left->thread=true;
	root->right=create(3);
	inorder(root);
	return 0;
}
